#!/bin/bash

# Get the directory of the current script
SCRIPT_DIR=$(dirname "$(realpath "$0")")

# Define color and formatting constants
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Function to print a header
print_header() {
    echo -e "\n${BOLD}${BLUE}== $1 ==${NC}"
}

# Function to print a section
print_section() {
    echo -e "\n${BOLD}${YELLOW}-- $1 --${NC}"
}

# Function to print success message
print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

# Function to print error message
print_error() {
    echo -e "${RED}✗ $1${NC}"
}

# Function to print warning message
print_warning() {
    echo -e "${YELLOW}! $1${NC}"
}

# Function to print info message
print_info() {
    echo -e "${BLUE}> $1${NC}"
}

# Check if a command was provided
if [ $# -eq 0 ]; then
    print_header "PostgreSQL Container Manager"
    echo -e "${BOLD}Usage:${NC} pg [command]"
    echo -e "\n${BOLD}Commands:${NC}"
    echo -e "  ${GREEN}start${NC}  - Start PostgreSQL containers"
    echo -e "  ${BLUE}status${NC} - Check if PostgreSQL containers are running and display connection information"
    echo -e "  ${YELLOW}stop${NC}   - Stop PostgreSQL containers"
    echo -e "  ${RED}clean${NC}  - Stop PostgreSQL containers and remove volumes"
    echo -e "  ${YELLOW}fix${NC}    - Detect and fix port conflicts by shutting down conflicting containers"
    exit 1
fi

# Execute the appropriate command
case "$1" in
    start)
        print_header "Starting PostgreSQL Containers"
        # Run docker compose up and capture the exit code
        print_info "Running docker compose up..."
        docker compose -f ${SCRIPT_DIR}/docker-compose.yaml up -d
        UP_EXIT_CODE=$?

        # Check if docker compose up was successful
        if [ $UP_EXIT_CODE -eq 0 ]; then
            print_success "PostgreSQL containers started successfully"
            print_section "Container Status"
            docker compose -f ${SCRIPT_DIR}/docker-compose.yaml \
                ps --format "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}\t{{.Names}}"
        else
            print_error "Failed to start PostgreSQL containers - Port conflict detected"

            # Check for containers using PostgreSQL port (15432)
            PG_CONFLICT=$(docker ps --format "{{.Names}}" -f "publish=15432")
            PG_COMPOSE_FILE=""

            if [ ! -z "$PG_CONFLICT" ]; then
                print_warning "Port 15432 in use by: $PG_CONFLICT"

                # Try to find the Docker Compose working directory
                COMPOSE_WORKING_DIR=$(docker inspect $PG_CONFLICT --format '{{index .Config.Labels "com.docker.compose.project.working_dir"}}')
                if [ ! -z "$COMPOSE_WORKING_DIR" ]; then
                    PG_COMPOSE_FILE="${COMPOSE_WORKING_DIR}/docker-compose.yaml"
                    PG_COMPOSE_WORKING_DIR="$COMPOSE_WORKING_DIR"
                fi
            fi

            # Check for containers using pgAdmin port (15433)
            PGADMIN_CONFLICT=$(docker ps --format "{{.Names}}" -f "publish=15433")
            PGADMIN_COMPOSE_FILE=""

            if [ ! -z "$PGADMIN_CONFLICT" ]; then
                print_warning "Port 15433 in use by: $PGADMIN_CONFLICT"

                # Try to find the Docker Compose working directory
                COMPOSE_WORKING_DIR=$(docker inspect $PGADMIN_CONFLICT --format '{{index .Config.Labels "com.docker.compose.project.working_dir"}}')
                if [ ! -z "$COMPOSE_WORKING_DIR" ] && [ "$PG_COMPOSE_FILE" != "${COMPOSE_WORKING_DIR}/docker-compose.yaml" ]; then
                    PGADMIN_COMPOSE_FILE="${COMPOSE_WORKING_DIR}/docker-compose.yaml"
                    PGADMIN_COMPOSE_WORKING_DIR="$COMPOSE_WORKING_DIR"
                fi
            fi

            # Show fix command
            print_info "To fix, run: ${BOLD}pg fix${NC}"

            # If we have Docker Compose information, show the command to shut down the conflicting containers
            if [ ! -z "${PG_COMPOSE_FILE}" ]; then
                print_info "Or run: ${BOLD}docker compose -f ${PG_COMPOSE_FILE} down${NC}"
            fi

            if [ ! -z "${PGADMIN_COMPOSE_FILE}" ] && [ "${PG_COMPOSE_FILE}" != "${PGADMIN_COMPOSE_FILE}" ]; then
                print_info "And: ${BOLD}docker compose -f ${PGADMIN_COMPOSE_FILE} down${NC}"
            fi

            # Exit with the original error code
            exit $UP_EXIT_CODE
        fi
        ;;
    stop)
        print_header "Stopping PostgreSQL Containers"
        print_info "Running docker compose down..."
        docker compose -f ${SCRIPT_DIR}/docker-compose.yaml down
        print_success "PostgreSQL containers stopped successfully"
        ;;
    clean)
        print_header "Cleaning PostgreSQL Containers and Volumes"
        print_warning "This will remove all data in the PostgreSQL volumes"
        print_info "Running docker compose down with volumes..."
        docker compose -f ${SCRIPT_DIR}/docker-compose.yaml down -v
        print_success "PostgreSQL containers and volumes cleaned successfully"
        ;;
    status)
        print_header "PostgreSQL Status"
        print_section "Container Status"
        docker compose -f ${SCRIPT_DIR}/docker-compose.yaml ps --format "table {{.Service}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"

        # Check if containers are running
        if docker compose -f ${SCRIPT_DIR}/docker-compose.yaml ps --services --filter "status=running" | grep -q "postgres"; then
            print_success "PostgreSQL is running"

            print_section "PostgreSQL Connection Information"
            echo -e "${BOLD}Host:${NC}     localhost"
            echo -e "${BOLD}Port:${NC}     15432"
            echo -e "${BOLD}Username:${NC} postgres"
            echo -e "${BOLD}Password:${NC} password"
            echo -e "${BOLD}Database:${NC} postgres"

            print_section "JDBC Connection URL"
            echo "jdbc:postgresql://localhost:15432/postgres"

            print_section "PSQL Command"
            echo "PGPASSWORD=password psql -h localhost -p 15432 -U postgres -d postgres"

            if docker compose -f ${SCRIPT_DIR}/docker-compose.yaml ps --services --filter "status=running" | grep -q "pgadmin"; then
                print_success "pgAdmin is running"

                print_section "pgAdmin Information"
                echo -e "${BOLD}URL:${NC}      http://localhost:15433"
                echo -e "${BOLD}Email:${NC}    admin@example.com"
                echo -e "${BOLD}Password:${NC} admin"
            else
                print_warning "pgAdmin is not running"
            fi
        else
            print_error "PostgreSQL is not running"
        fi
        ;;
    fix)
        print_header "Fixing Port Conflicts"

        # Check for containers using PostgreSQL port (15432)
        PG_CONFLICT=$(docker ps --format "{{.Names}}" -f "publish=15432")
        PG_COMPOSE_FILE=""

        if [ ! -z "$PG_CONFLICT" ]; then
            print_warning "Port 15432 in use by: $PG_CONFLICT"
            COMPOSE_WORKING_DIR=$(docker inspect $PG_CONFLICT --format '{{index .Config.Labels "com.docker.compose.project.working_dir"}}')
            if [ ! -z "$COMPOSE_WORKING_DIR" ]; then
                PG_COMPOSE_FILE="${COMPOSE_WORKING_DIR}/docker-compose.yaml"
            fi
        fi

        # Check for containers using pgAdmin port (15433)
        PGADMIN_CONFLICT=$(docker ps --format "{{.Names}}" -f "publish=15433")
        PGADMIN_COMPOSE_FILE=""

        if [ ! -z "$PGADMIN_CONFLICT" ]; then
            print_warning "Port 15433 in use by: $PGADMIN_CONFLICT"
            COMPOSE_WORKING_DIR=$(docker inspect $PGADMIN_CONFLICT --format '{{index .Config.Labels "com.docker.compose.project.working_dir"}}')
            if [ ! -z "$COMPOSE_WORKING_DIR" ] && [ "$PG_COMPOSE_FILE" != "${COMPOSE_WORKING_DIR}/docker-compose.yaml" ]; then
                PGADMIN_COMPOSE_FILE="${COMPOSE_WORKING_DIR}/docker-compose.yaml"
            fi
        fi

        # Shut down conflicting containers
        if [ ! -z "$PG_COMPOSE_FILE" ]; then
            print_info "Shutting down: $PG_CONFLICT"
            docker compose -f "$PG_COMPOSE_FILE" down
        fi

        if [ ! -z "$PGADMIN_COMPOSE_FILE" ]; then
            print_info "Shutting down: $PGADMIN_CONFLICT"
            docker compose -f "$PGADMIN_COMPOSE_FILE" down
        fi

        if [ -z "$PG_COMPOSE_FILE" ] && [ -z "$PGADMIN_COMPOSE_FILE" ]; then
            print_success "No port conflicts detected"
        else
            print_success "Port conflicts resolved. Run 'pg start' to start PostgreSQL"
        fi
        ;;
    *)
        print_header "Unknown Command: $1"
        echo -e "${BOLD}Usage:${NC} pg [command]"
        echo -e "\n${BOLD}Commands:${NC}"
        echo -e "  ${GREEN}start${NC}  - Start PostgreSQL containers"
        echo -e "  ${BLUE}status${NC} - Check if PostgreSQL containers are running and display connection information"
        echo -e "  ${YELLOW}stop${NC}   - Stop PostgreSQL containers"
        echo -e "  ${RED}clean${NC}  - Stop PostgreSQL containers and remove volumes"
        echo -e "  ${YELLOW}fix${NC}    - Detect and fix port conflicts by shutting down conflicting containers"
        exit 1
        ;;
esac
